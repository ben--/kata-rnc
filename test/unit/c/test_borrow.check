#include "rnc.h"

# suite borrow

# test cannot_borrow_i_from_ii
    char buf[6] = "II";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'I');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("II", buf);

# test can_borrow_i_from_v
    char buf[6] = "V";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'I');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("IIIII", buf);

# test can_borrow_v_from_x
    char buf[3] = "X";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'V');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("VV", buf);

# test can_borrow_v_from_cx_will_perform_search
    char buf[4] = "CX";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'V');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("CVV", buf);

# test can_borrow_i_from_x_will_transitively_expand
    char buf[32] = "X";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'I');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("VIIIII", buf);

# test can_borrow_v_from_cxi_will_transitively_expand_inner_letter
    char buf[32] = "CXI";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'V');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("CVVI", buf);

# test borrow_returns_an_error_on_overflow
    char buf[4] = "CX";
    buf[3] = '*';

    int actual_ret = rnc_borrow(buf, sizeof(buf) - 1, 'V');

    ck_assert_int_eq(1, actual_ret);
    ck_assert_int_eq('*', buf[3]);

# test borrow_returns_an_error_on_suffix_overflow
    char buf[5] = "CXI";
    buf[4] = '*';

    int actual_ret = rnc_borrow(buf, sizeof(buf) - 1, 'V');

    ck_assert_int_eq(1, actual_ret);
    ck_assert_int_eq('*', buf[4]);

# test can_borrow_x_from_l
    char buf[6] = "L";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'X');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("XXXXX", buf);

# test can_borrow_l_from_c
    char buf[3] = "C";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'L');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("LL", buf);

# test can_borrow_c_from_d
    char buf[6] = "D";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'C');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("CCCCC", buf);

# test can_borrow_d_from_m
    char buf[3] = "M";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'D');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("DD", buf);

# test internal_buffers_are_long_enough_for_a_maximal_borrow
    char expected[] = "MMMDCCCCLXXXXVIIIII";
    char buf[sizeof(expected)] = "MMMM";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'I');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq(expected, buf);

# test internal_buffers_are_long_enough_for_an_ugly_suffix
    char expected[] = "MMDDCCCCLXXXXVIIII";
    char buf[sizeof(expected)] = "MMMCCCCLXXXXVIIII";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'D');

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq(expected, buf);

# test fails_cleanly_on_malformed_too_long_suffix
    char buf[32] = "MMMCCCCLXXXXVIIIII";

    int actual_ret = rnc_borrow(buf, sizeof(buf), 'D');

    ck_assert_int_ne(0, actual_ret);
