#include "rnc.h"

# suite add

static void _test(const char *expected, const char *l, const char *r) {
    int actual_ret;
    char actual_sum[32] = { 'u', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd' };

    actual_ret = rnc_add(actual_sum, sizeof(actual_sum), l, r);

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq(expected, actual_sum);
}

# test i_plus_i
    _test("II", "I", "I");

# test i_plus_ii
    _test("III", "I", "II");

# test ii_plus_iii_requires_normalization_to_v
    _test("V", "II", "III");

# test v_plus_i
    _test("VI", "V", "I");

# test i_plus_v_understands_the_relative_order_of_v_and_i
    _test("VI", "I", "V");

# test i_plus_iv_denormalizes_before_adding
    _test("V", "I", "IV");

# test iv_plus_iv_normalizes_partial_numbers
    _test("VIII", "IV", "IV");

# test l_plus_i_supports_l
    _test("LI", "I", "L");

# test i_plus_l_supports_l
    _test("LI", "L", "I");

# test i_plus_i_fails_to_put_answer_in_a_too_short_buffer
    int actual_ret;
    char actual_sum[] = { '\0', '\0' };

    actual_ret = rnc_add(actual_sum, sizeof(actual_sum), "I", "I");

    ck_assert_int_ne(0, actual_ret);
