#include "rnc.h"

# suite denormalize

static void _test(const char *normal, const char *expected) {
    int actual_ret;
    char actual_val[32] = { 'u', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd' };

    actual_ret = rnc_denormalize(actual_val, sizeof(actual_val), normal);

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq(expected, actual_val);
}

# test iv
    _test("IV", "IIII");

# test ix
    _test("IX", "VIIII");

# test xiv_does_partial_expansion_at_end_of_word
    _test("XIV", "XIIII");

# test xix
    _test("XIX", "XVIIII");

# test xl
    _test("XL", "XXXX");

# test xlix
    _test("XLIX", "XXXXVIIII");

# test xc
    _test("XC", "LXXXX");

# test cd
    _test("CD", "CCCC");

# test cm
    _test("CM", "DCCCC");

# test succeeds_with_barely_enough_space
    int actual_ret;
    char actual_val[] = { '*', '*', '*', '*', '*', 'a', 'd', 'a', 'd', '\0' };

    actual_ret = rnc_denormalize(actual_val, 5, "IV");

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("IIII", actual_val);
    ck_assert_str_eq("adad", actual_val + 5);

# test fails_cleanly_without_enough_space
    int actual_ret;
    char actual_val[] = { '*', '*', '*', '*', 'a', 'd', 'a', 'd', '\0' };

    actual_ret = rnc_denormalize(actual_val, 4, "IV");

    ck_assert_int_ne(0, actual_ret);
    ck_assert_str_eq("adad", actual_val + 4);
