#include "rnc.h"

# suite normalize

static void _test(const char *expected, const char *denormal) {
    int actual_ret;
    char actual_val[32] = { 'u', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd' };
    strcpy(actual_val, denormal);

    actual_ret = rnc_normalize(actual_val, sizeof(actual_val));

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq(expected, actual_val);
}

# test iiii
    _test("IV", "IIII");

# test iiiii
    _test("V", "IIIII");

# test vv
    _test("X", "VV");

# test iiiiiii
    _test("VII", "IIIIIII");

# test iiiiiiii
    _test("VIII", "IIIIIIII");

# test viiiii
    _test("X", "VIIIII");

# test viiii
    _test("IX", "VIIII");

# test vviv_becomes_xiv
    _test("XIV", "VVIV");

# test xviiii
    _test("XIX", "XVIIII");

# test xxxxx
    _test("L", "XXXXX");

# test xxxx
    _test("XL", "XXXX");

# test lxxxx
    _test("XC", "LXXXX");

# test lxxxxx
    _test("C", "LXXXXX");

# test ll
    _test("C", "LL");

# test llxl_becomes_cxl
    _test("CXL", "LLXL");

# test cccc
    _test("CD", "CCCC");

# test ccccc
    _test("D", "CCCCC");

# test dcccc
    _test("CM", "DCCCC");

# test dccccc
    _test("M", "DCCCCC");

# test dd
    _test("M", "DD");

# test ddcd_becomes_mcd
    _test("MCD", "DDCD");

# test returns_failure_on_too_big_number
    int actual_ret;
    char actual_val[32] = "MMMM";

    actual_ret = rnc_normalize(actual_val, sizeof(actual_val));

    ck_assert_int_ne(0, actual_ret);
