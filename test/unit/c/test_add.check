#include "rnc.h"

# suite add

static void _test(const char *expected, const char *l, const char *r) {
    int actual_ret;
    char actual_sum[32] = { 'u', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd' };

    actual_ret = rnc_add(actual_sum, sizeof(actual_sum), l, r);

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq(expected, actual_sum);
}

# test i_plus_i
    _test("II", "I", "I");

# test i_plus_ii
    _test("III", "I", "II");

# test ii_plus_iii_requires_normalization_to_v
    _test("V", "II", "III");

# test v_plus_i
    _test("VI", "V", "I");

# test i_plus_v_understands_the_relative_order_of_v_and_i
    _test("VI", "I", "V");

# test i_plus_iv_denormalizes_before_adding
    _test("V", "I", "IV");

# test iv_plus_iv_normalizes_partial_numbers
    _test("VIII", "IV", "IV");

# test l_plus_i_supports_l
    _test("LI", "I", "L");

# test i_plus_l_supports_l
    _test("LI", "L", "I");

# test fails_cleanly_when_buffer_is_one_character_too_short
    int actual_ret;
    char heap[] = { '*', '*', 'a', 'd', 'a', 'd' };

    actual_ret = rnc_add(heap, 2, "I", "I");

    ck_assert_int_ne(0, actual_ret);
    ck_assert_int_eq(0, memcmp(heap + 2, "adad", sizeof(heap) - 2));

# test fails_cleanly_when_buffer_is_far_too_short
    int actual_ret;
    char heap[] = { '*', '*', 'a', 'd', 'a', 'd' };

    actual_ret = rnc_add(heap, 2, "XX", "II");

    ck_assert_int_ne(0, actual_ret);
    ck_assert_int_eq(0, memcmp(heap + 2, "adad", sizeof(heap) - 2));

# test fails_cleanly_when_buffer_is_far_too_short_regardless_of_input_order
    int actual_ret;
    char heap[] = { '*', '*', 'a', 'd', 'a', 'd' };

    actual_ret = rnc_add(heap, 2, "II", "XX");

    ck_assert_int_ne(0, actual_ret);
    ck_assert_int_eq(0, memcmp(heap + 2, "adad", sizeof(heap) - 2));

# test does_not_fail_when_incoming_buffer_is_big_enough_for_normalized_sum
    int actual_ret;
    char heap[] = { '*', '*', 'a', 'd', 'a', 'd' };

    actual_ret = rnc_add(heap, 2, "IV", "I");

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("V", heap);
    ck_assert_int_eq(0, memcmp(heap + 2, "adad", sizeof(heap) - 2));

# test accepts_worst_case_expansion_on_the_left
    _test("MMMM", "MMMCMXCIX", "I");

# test accepts_worst_case_expansion_on_the_right
    _test("MMMM", "I", "MMMCMXCIX");

# test accepts_worst_case_sum
    _test("MMMCMXCVIII", "MCMXCIX", "MCMXCIX");

# test fails_cleanly_on_addition_that_would_result_in_a_buffer_overflow
    int actual_ret;
    char out[32];

    actual_ret = rnc_add(out, sizeof(out), "MCMXCIX", "MMCMXCIX");

    ck_assert_int_ne(0, actual_ret);

# test fails_cleanly_on_too_long_lhs
    int actual_ret;
    char out[32];

    actual_ret = rnc_add(out, sizeof(out), "MMMCMXCIXI", "I");

    ck_assert_int_ne(0, actual_ret);

# test fails_cleanly_on_too_long_rhs
    int actual_ret;
    char out[32];

    actual_ret = rnc_add(out, sizeof(out), "I", "MMMCMXCIXI");

    ck_assert_int_ne(0, actual_ret);

# test validates_lhs_numeral
    int actual_ret;
    char out[32];

    actual_ret = rnc_add(out, sizeof(out), "J", "I");

    ck_assert_int_ne(0, actual_ret);

# test validates_rhs_numeral
    int actual_ret;
    char out[32];

    actual_ret = rnc_add(out, sizeof(out), "I", "i");

    ck_assert_int_ne(0, actual_ret);
