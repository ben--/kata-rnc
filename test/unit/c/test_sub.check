#include "rnc.h"

# suite sub

static void _test(const char *l, const char *r, const char *expected) {
    int actual_ret;
    char actual_diff[32] = { 'u', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd' };

    actual_ret = rnc_sub(actual_diff, sizeof(actual_diff), l, r);

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq(expected, actual_diff);
}

static void _test_fail(const char *l, const char *r) {
    int actual_ret;
    char actual_diff[32] = { 'u', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd' };

    actual_ret = rnc_sub(actual_diff, sizeof(actual_diff), l, r);

    ck_assert_int_ne(0, actual_ret);
}

# test ii_minus_i
    _test("II", "I", "I");

# test iii_minus_i
    _test("III", "I", "II");

# test i_minus_ii_fails_on_negative
    _test_fail("I", "II");

# test v_minus_ii_performs_a_borrow_operation_when_necessary
    _test("V", "II", "III");

# test v_minus_i_performs_a_normalize_before_return
    _test("V", "I", "IV");

# test iv_minus_i_performs_a_denormalize_before_subtraction
    _test("IV", "I", "III");

# test x_minus_vi_extracts_one_element_at_a_time
    _test("X", "VI", "IV");

# test m_minus_i_performs_a_full_depth_borrow
    _test("M", "I", "CMXCIX");

# test worst_case_rhs_expansion
    _test("MMMM", "MMMCMXCIX", "I");

# test worst_case_lhs_expansion
    _test("MMMM", "I", "MMMCMXCIX");

# test succeeds_with_barely_enough_space_without_overwriting
    int actual_ret;
    char actual_diff[] = { '*', '*', '*', 'a', 'd', 'a', 'd', '\0' };

    actual_ret = rnc_sub(actual_diff, 3, "X", "I");

    ck_assert_int_eq(0, actual_ret);
    ck_assert_str_eq("IX", actual_diff);
    ck_assert_str_eq("adad", actual_diff + 3);
